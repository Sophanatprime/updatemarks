\NeedsTeXFormat{LaTeX2e}[2020/10/01]
\ProvidesExplPackage{updatemarks}{2023/09/01}{v0.1}{extract and update marks from box}
\RequirePackage{etoolbox}

\seq_new:N \g__updatemarks_seq
\box_new:N \l__updatemarks_box 
\tex_countdef:D \g_updatemarks_max_int 256 \exp_stop_f:


%% basicly copy from \__mark_update_structure:nn of LaTeX kernel 
\cs_new_protected:Npn \__updatemarks_extract:nnn #1#2#3 % box, map of number, code 
  {
    \group_begin:
    \dim_set_eq:NN \tex_splitmaxdepth:D \c_max_dim
    \int_set_eq:NN \tex_vbadness:D      \c_max_int
    \dim_set_eq:NN \tex_vfuzz:D         \c_max_dim
    \vbox_set_to_ht:Nnw \l__updatemarks_box { -.5 \c_max_dim }
      #1 \tex_unskip:D 
      \box_set_to_last:N \l__updatemarks_box
      \int_compare:nNnT { \tex_lastnodetype:D } < { 0 }
        {
          \box_if_vertical:NT \l__updatemarks_box
            {
              \vbox_set_to_ht:Nnn \l__updatemarks_box { -.5 \c_max_dim }
                { \vbox_unpack:N \l__updatemarks_box \tex_kern:D \c_zero_dim }
              \int_compare:nNnT { \tex_badness:D } > { 0 }
                { \vbox_unpack:N \l__updatemarks_box }
            }
        }
      \tex_kern:D \c_zero_dim
    \vbox_set_end:
    \int_compare:nNnTF { \tex_badness:D } > { 0 }
      {
        \vbox_set_split_to_ht:NNn \l__updatemarks_box \l__updatemarks_box \c_max_dim
        \__updatemarks_extract_split:nn {#2} {#3}
      }
      {
        \msg_error:nn { updatemarks } { infinite-shrinkage }
        #2
          {
            \cs_undefine:N \l_updatemarks_first_tl
            \cs_undefine:N \l_updatemarks_bot_tl
            #3
          }
      }
    \group_end:
  }
\cs_new_protected:Npn \__updatemarks_extract_split:nn #1#2
  {
    #1 
      { 
        \tl_set:No \l_updatemarks_bot_tl { \tex_splitbotmarks:D ##1 }
        \tl_if_empty:NTF \l_updatemarks_bot_tl
          {
            \cs_undefine:N \l_updatemarks_first_tl
            \cs_undefine:N \l_updatemarks_bot_tl
          }
          { \tl_set:No \l_updatemarks_first_tl { \tex_splitfirstmarks:D ##1 } }
        #2
      }
  }
\cs_new_protected:Npn \__updatemarks_extract_num:n #1
  {
    \tl_if_exist:NT \l_updatemarks_bot_tl
      {
        \tl_if_exist:cF { g__updatemarks_first-#1_tl }
          { \tl_gset_eq:cN { g__updatemarks_first-#1_tl } \l_updatemarks_first_tl }
        \tl_gset_eq:cN { g__updatemarks_bot-#1_tl } \l_updatemarks_bot_tl
      }
  }
\cs_new_protected:Npn \updatemarks_extract:nN #1#2
  {
    \__updatemarks_extract:nnn {#1}
      { \seq_map_inline:Nn #2 }
      { \__updatemarks_extract_num:n {##1} }
  }
\cs_new_protected:Npn \updatemarks_extract_split:N #1
  {
    \__updatemarks_extract_split:nn 
      { \seq_map_inline:Nn #1 }
      { \__updatemarks_extract_num:n {##1} }
  }


\cs_new_protected:Npn \updatemarks_update:N #1 % seq 
  {
    \seq_map_inline:Nn #1
      {
        \tl_if_exist:cT { g__updatemarks_bot-##1_tl }
          {
            \tl_if_exist:cT { g__updatemarks_first-##1_tl }
              { \tex_marks:D ##1 { \exp_not:v { g__updatemarks_first-##1_tl } } }
            \tex_marks:D ##1 { \exp_not:v { g__updatemarks_bot-##1_tl } } 
            \cs_undefine:c { g__updatemarks_first-##1_tl }
            \cs_undefine:c { g__updatemarks_bot-##1_tl }
            \if@nobreak\ifvmode\nobreak\fi\fi
          }
      }
  }
% do not check if it is <= \g_updatemarks_max_int
\cs_new_protected:Npn \__updatemarks_gput:Nn #1#2
  {
    \group_begin:
    \cs_set_eq:NN \MarkClass \__updatemarks_class_num:n 
    \cs_set_eq:NN \MaxClass \g_updatemarks_max_int
    \clist_map_inline:nn {#2}
      { \seq_gput_right:Nx #1 { \int_eval:n { \__udpatemarks_maybe_class:n {##1} } } }
    \seq_gremove_duplicates:N #1
    \group_end:
  }

\cs_new:Npn \__updatemarks_class_num:n #1 { \cs:w c__mark_class_ #1 _mark \cs_end: }
\cs_new:Npn \__udpatemarks_maybe_class:n #1
  { 
    \tl_if_head_eq_meaning:nNTF {#1} [ % ]
      { \__udpatemarks_maybe_class_aux:w #1 } {#1}
  }
\cs_new:Npn \__udpatemarks_maybe_class_aux:w [#1] 
  { 
    \cs_if_exist_use:cF { c__mark_class_ #1 _mark } 
      { 0 \msg_expandable_error:nnn { updatemarks } { unknown-class } {#1} }
  }



\seq_new:N \g_updatemarks_seq 
\NewDocumentCommand \ExtractMarks { o m }
  {
    \tl_if_novalue:nTF {#1}
      {
        \updatemarks_extract:nN 
          { 
            \if_hbox:N #2 \hbox_unpack:N #2 \scan_stop: \fi:
            \if_vbox:N #2 \vbox_unpack:N #2 \scan_stop: \fi:
          } 
          \g_updatemarks_seq
      }
      {
        \seq_gclear:N \g__updatemarks_seq
        \__updatemarks_gput:Nn \g__updatemarks_seq {#1}
        \updatemarks_extract:nN 
          { 
            \if_hbox:N #2 \hbox_unpack:N #2 \scan_stop: \fi:
            \if_vbox:N #2 \vbox_unpack:N #2 \scan_stop: \fi:
          } 
          \g__updatemarks_seq
      }
  }
\NewDocumentCommand \ExtractSplitMarks { o }
  {
    \tl_if_novalue:nTF {#1}
      { \updatemarks_extract_split:N \g_updatemarks_seq }
      {
        \seq_gclear:N \g__updatemarks_seq
        \__updatemarks_gput:Nn \g__updatemarks_seq {#1}
        \updatemarks_extract_split:N \g__updatemarks_seq
      }
  }
\NewDocumentCommand \UpdateMarks { o }
  {
    \tl_if_novalue:nTF {#1}
      { \updatemarks_update:N \g_updatemarks_seq }
      {
        \seq_gclear:N \g__updatemarks_seq
        \__updatemarks_gput:Nn \g__updatemarks_seq {#1}
        \updatemarks_update:N \g__updatemarks_seq
      }
  }
\cs_new_protected:Npn \AddToUpdateMarksList 
  { \__updatemarks_gput:Nn \g_updatemarks_seq }
\cs_new_protected:Npn \SetUpdateMarksList 
  { 
    \seq_gclear:N \g_updatemarks_seq 
    \AddToUpdateMarksList 
  }

\cs_new_protected:Npn \__updatemarks_get_all_classes:
  {
    \seq_new:N \g_updatemarks_classes_seq
    \seq_if_exist:NT \g__mark_classes_seq
      {
        \seq_map_inline:Nn \g__mark_classes_seq
          { 
            \seq_gput_right:Nx \g_updatemarks_classes_seq 
              { \int_value:w \__updatemarks_class_num:n {##1} } 
          }
      }
  }
\hook_gput_code:nnn { begindocument/end } { updatemarks } 
  { 
    \__updatemarks_get_all_classes: 
    \int_step_inline:nnn { 0 } { \g_updatemarks_max_int }
      { \seq_gput_right:Nn \g_updatemarks_seq {#1} }
  }

\msg_new:nnn { updatemarks } { unknown-class } { Unknown~mark~class~`#1'. }
\msg_new:nnn { updatemarks } { infinite-shrinkage }
  { Infinite~shrinkage~found~when~extracting~marks. }


\cs_new_protected:Npn \updatemarks@of #1
  { 
    \bool_if:cT { l__updatemarks_#1_bool }
      { \updatemarks_update:N \g_updatemarks_seq }
  }
\cs_new_protected:Npn \extractmarks@of #1 #2
  {
    \bool_if:cT { l__updatemarks_#1_bool }
      { \updatemarks_extract:nN { #2 } \g_updatemarks_seq }
  }
\cs_new_protected:Npn \extractsplitmarks@of #1
  {
    \bool_if:cT { l__updatemarks_#1_bool }
      { \updatemarks_extract_split:N \g_updatemarks_seq }
  }
% minipage 
\let\updatemarks@endminipage\endminipage
\patchcmd \endminipage 
  { \color@endgroup\egroup } 
  { \color@endgroup\egroup\extractmarks@of{minipage}{\unvcopy\@tempboxa} } 
  { } { \ERROR }
\apptocmd \endminipage { \updatemarks@of{minipage} } { } { \ERROR }
% tcolorbox
\cs_new_protected:Npn \updatemarks@tcolorbox@patch 
  {
    \tcbset{updatemarks/.is~choice,
      updatemarks/true/.code=\bool_set_true:N \l__updatemarks_tcolorbox_bool,
      updatemarks/false/.code=\bool_set_false:N \l__updatemarks_tcolorbox_bool,
      updatemarks/.default=true}
    \patchcmd \tcbox@inner@hbox { \tcbdimto }
      { \extractmarks@of{tcolorbox}{\unhcopy\tcb@upperbox}\tcbdimto }
      { } { \ERROR }
    \patchcmd \endtcb@lrbox 
      { \color@endgroup\egroup } 
      { \color@endgroup\egroup\extractmarks@of{tcolorbox}{\unvcopy\@tempboxa} } 
      { } { \ERROR }
    \patchcmd \tcb@drawing@env@end { \csname }
      { \updatemarks@of{tcolorbox}\csname } { } { \ERROR }
    % breakable library
    \ifdefined \tcb@vsplit@upper 
      \apptocmd \tcb@vsplit@upper { \extractsplitmarks@of{tcolorbox} } { } { \ERROR }
      \apptocmd \tcb@vsplit@lower { \extractsplitmarks@of{tcolorbox} } { } { \ERROR }
      \patchcmd \tcb@split@start { \iftcb@final@box }
        { \iftcb@final@box 
          \extractmarks@of{tcolorbox}{\unvcopy\tcb@upperbox\unvcopy\tcb@lowerbox} } 
        { } { \ERROR }
      \patchcmd \tcb@split@start 
        { \tcb@comp@h@page\tcb@check@for@final@box\iftcb@final@box }
        { \tcb@comp@h@page\tcb@check@for@final@box\iftcb@final@box 
          \extractmarks@of{tcolorbox}{\unvcopy\tcb@upperbox\unvcopy\tcb@lowerbox}}
        { } { \ERROR }
      \patchcmd \tcb@split@USL { \iftcb@final@box }
        { \iftcb@final@box 
          \extractmarks@of{tcolorbox}{\unvcopy\tcb@totalupperbox 
            \iftcb@lowerspace\unvcopy\tcb@totallowerbox\fi } 
        } 
        { } { \ERROR }
      \patchcmd \tcb@split@SL@displayed { \iftcb@final@box }
        { \iftcb@final@box 
          \extractmarks@of{tcolorbox}{\unvcopy\tcb@totallowerbox} } 
        { } { \ERROR }
      \patchcmd \tcb@split@L { \iftcb@final@box }
        { \iftcb@final@box 
          \extractmarks@of{tcolorbox}{\unvcopy\tcb@totallowerbox} } 
        { } { \ERROR }
    \fi 
  }
\@ifpackageloaded{tcolorbox}{\updatemarks@tcolorbox@patch}
  {\AddToHook{package/tcolorbox/after}{\let\endtcb@lrbox\updatemarks@endminipage
    \AtBeginDocument{\updatemarks@tcolorbox@patch}}}


\keys_define:nn { updatemarks }
  {
    minipage  .bool_set:N = \l__updatemarks_minipage_bool  ,
    tcolorbox .bool_set:N = \l__updatemarks_tcolorbox_bool ,
%    multicols .bool_set:N = \l__updatemarks_multicols_bool ,
%    paracol   .bool_set:N = \l__updatemarks_paracol_bool   ,
  }

\cs_if_exist:NTF \ProcessKeyOptions
  { \ProcessKeyOptions [ updatemarks ] }
  {
    \RequirePackage{l3keys2e}
    \ProcessKeysOptions { updatemarks }
  }
